buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

project.ext {
    buildNum = System.getenv("BUILD_NUMBER")
    mcVersion = "${project.minecraft.version}"
    moCVersion = "${moarcartsversion}-${project.ext.buildNum}"
}

version = "${minecraftversion}-" + project.ext.moCVersion
group = "brassgoggledcoders"
archivesBaseName = "moarcarts"

minecraft {
    version = "${minecraftversion}-${forgeversion}"
    mappings = "${mappingsversion}"
    useDepAts = true
    runDir = "run/"
    useDepAts = true

    replace "@VERSION@", project.ext.moCVersion
    replaceIn "MoarCarts.java"
}

repositories {
    mavenLocal()
    maven {
        name "K4Repo"
        url "http://maven.k-4u.nl"
    }
    maven {
        name "JEI"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name "Waila"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name "MCMultiPart"
        url "http://maven.amadornes.com/"
    }
    maven {
        name "Neotech"
        url "http://www.teambrmodding.com/maven2/"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade "brassgoggledcoders:boilerplate:${minecraftversion}-${boilerplateversion}:lib"
    compile "brassgoggledcoders:boilerplate:${minecraftversion}-${boilerplateversion}:api"
    compile "mcp.mobius.waila:Waila:${wailaversion}:dev"
    deobfCompile "mezz.jei:jei_${minecraftversion}:${jeiversion}"
    compile "k4unl:HydCraft:${minecraftversion}-${hydraulicraftversion}:deobf"
    deobfCompile "MCMultiPart:MCMultiPart:${mcmultipartversion}:universal"
    compile "com.dyonovan.neotech:NeoTech:${minecraftversion}-${neotechversion}:dev"
}



task getLibraries {
    def libsFolder = new File('libs')
    if (!libsFolder.isDirectory()) {
        libsFolder.mkdirs()
    }

    def downloads = new ArrayList<Tuple>();

    def ironchest = 'ironchest-' + minecraftversion + '-' + ironchestversion + '.jar'
    def ironchestSource = 'http://addons.curse.cursecdn.com/files/2276/366/' + ironchest

    def ie = 'ImmersiveEngineering-' + minecraftversion + '-' + ieversion + '.jar'
    def ieSource = 'http://minecraft.curseforge.com/projects/immersive-engineering/files/2299062/download'

    downloads.add(new Tuple(ironchest, ironchestSource))
    downloads.add(new Tuple(ie, ieSource))

    libsFolder.listFiles().each { file ->
        def isInDownloadList = false;
        downloads.each {download ->
            if(file.name.equals(download.get(0).toString())) {
                isInDownloadList = true;
            }
        }
        if(!isInDownloadList || file.size() < 5) {
            println "Deleting file " + file.name
            file.delete();
        }
    }

    downloads.each{download ->
        def fileLocation = new File('libs', download.get(0).toString())
        if(!fileLocation.exists())  {
            def downloadString = download.get(1).toString()
            if(downloadString.contains(" ")) {
                downloadString = downloadString.replace(" ", "%20");
            }
            println "Downloading " + download.get(0).toString()
            fileLocation.withOutputStream { out ->
                new URL(downloadString).withInputStream { from ->
                    out << from;
                }
            }
        }
    }


}

runClient {
    if(project.hasProperty('mcUsername') && project.hasProperty('mcPassword') ) {
        args += "--username=${project.mcUsername}"
        args += "--password=${project.mcPassword}"
    }
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

reobfJar {
    addExtraSrgLine "PK: xyz/brassgoggledcoders/boilerplate xyz/brassgoggledcoders/moarcarts/boilerplate"
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**', 'mcmod.info'
        }
    }
    classifier = ""
}

task deobfJar(type: Jar) {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
    from(sourceSets.main.output) {
        classifier = "deobf"
    }
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'moarcarts/api/*'
    classifier = 'api'
}

artifacts {
    archives deobfJar
    archives apiJar
}

task("uploadJars", dependsOn: "reobf") {
    description = "uploads JARs"
    if (System.getenv("local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("local_maven"))
                    pom {
                        groupId = project.group
                        version
                        artifactId = project.archivesBaseName
                        project {
                            name project.archivesBaseName
                            packaging 'jar'
                            description 'MoarCarts'
                            url 'http://BrassGoggledCoders.xyz'
                            scm {
                                url 'https://github.com/BrassGoggledCoders/MoarCarts.git'
                                connection 'scm:git:git@github.com:BrassGoggledCoders/MoarCarts.git'
                                developerConnection 'scm:git:git@github.com:BrassGoggledCoders/MoarCarts.git'
                            }
                            issueManagement {
                                system 'github'
                                url 'https://github.com/BrassGoggledCoders/MoarCarts/issues'
                            }
                            licenses {
                                license {
                                    name 'MIT'
                                    url 'https://github.com/BrassGoggledCoders/MoarCarts/blob/master/LICENSE'
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'SkySom'
                                    name 'SkySom'
                                    roles { role 'developer' }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
