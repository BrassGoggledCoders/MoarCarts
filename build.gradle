buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

project.ext {
    buildNum = System.getenv("BUILD_NUMBER")
    mcVersion = "${project.minecraft.version}"
}

version = "${minecraftversion}-${moarcartsversion}-${project.ext.buildNum}"
group = "brassgoggledcoders"
archivesBaseName = "moarcarts"

minecraft {
    version = "${minecraftversion}-${forgeversion}-${minecraftversion}"

    replace "@VERSION@", project.version
    replaceIn "MoarCarts.java"
}

repositories {
    mavenLocal()
    maven {
        name "K4Repo"
        url "http://maven.k-4u.nl"
    }
    maven {
        name "Chickenbones"
        url "http://chickenbones.net/maven/"
    }
    maven {
        name "Waila"
        url "http://mobiusstrip.eu/maven"
    }
}

dependencies {
    compile "brassgoggledcoders:boilerplate:${project.minecraftversion}-${boilerplateversion}:deobf"
    compile "mcp.mobius.waila:Waila:${wailaversion}_${project.minecraft.version}:dev"
    compile "codechicken:NotEnoughItems:${project.minecraftversion}-${neiversion}:dev"
    compile "codechicken:CodeChickenCore:${project.minecraftversion}-${codechickencoreversion}:dev"
    compile "codechicken:CodeChickenLib:${project.minecraftversion}-${codechickenlibversion}:dev"
}

task getLibraries {
    def libsFolder = new File('libs')
    if (!libsFolder.isDirectory()) {
        libsFolder.mkdirs()
    }

    def downloads = new ArrayList<Tuple>();

    def railcraft = 'Railcraft_' + project.minecraftversion + '-' + railcraftversion + '-dev.jar'
    def railcraftSource = 'https://dl.dropboxusercontent.com/u/38558957/Minecraft/Railcraft/' + railcraft

    def ironchest = 'ironchest-' + project.minecraftversion + '-' + ironchestversion + '-deobf.jar'
    def ironchestSource = 'http://files.minecraftforge.net/maven/cpw/mods/ironchest/' + project.minecraft.version +
            '-' + ironchestversion + '/' + ironchest

    def immersiveengineering = 'ImmersiveEngineering-' + immersiveengineeringversion + '.jar'
    def immersiveengineeringSource = 'http://minecraft.curseforge.com/projects/immersive-engineering/files/2273007/download'

    def inventorytweaks = 'inventory-tweaks-' + invtweaksversion + '.jar'
    def inventorytweaksSource = 'http://minecraft.curseforge.com/projects/inventory-tweaks/files/2210792/download'

    def cofhcore = 'cofhcore-' + cofhcoreversion + '.jar'
    def cofhcoreSource = 'http://minecraft.curseforge.com/projects/cofhcore/files/2246920/download'

    def minefactory = 'minefactory-' + minefactoryversion + '.jar'
    def minefactorySource = 'http://minecraft.curseforge.com/projects/minefactory-reloaded/files/2233907/download'

    def minechem = 'Minechem-' + project.minecraftversion + '-' + minechemversion + '.jar'
    def minechemSource = 'http://minecraft.curseforge.com/projects/minechem/files/2251057/download'

    def botania = 'Botania ' + botaniaversion + '-deobf.jar'
    def botaniaSource = 'http://botaniamod.net/files/deobf/' + botania

    def baubles = 'Baubles-' + project.minecraftversion + '-' + baublesversion + '.jar'
    def baublesSource = 'https://dl.dropboxusercontent.com/u/47135879/' + baubles

    def avaritia = 'avaritia-' + project.avaritiaversion + '.jar'
    def avaritiaSource = 'http://minecraft.curseforge.com/projects/avaritia/files/2268137/download'

    downloads.add(new Tuple(railcraft, railcraftSource))
    downloads.add(new Tuple(ironchest, ironchestSource))
    downloads.add(new Tuple(immersiveengineering, immersiveengineeringSource))
    downloads.add(new Tuple(inventorytweaks, inventorytweaksSource))
    downloads.add(new Tuple(cofhcore, cofhcoreSource))
    downloads.add(new Tuple(minefactory, minefactorySource))
    downloads.add(new Tuple(minechem, minechemSource))
    downloads.add(new Tuple(botania, botaniaSource))
    downloads.add(new Tuple(baubles, baublesSource))
    downloads.add(new Tuple(avaritia, avaritiaSource))

    libsFolder.listFiles().each { file ->
        def isInDownloadList = false;
        downloads.each {download ->
            if(file.name.equals(download.get(0).toString())) {
                isInDownloadList = true;
            }
        }
        if(!isInDownloadList || file.size() < 5) {
            println "Deleting file " + file.name
            file.delete();
        }
    }

    downloads.each{download ->
        def fileLocation = new File('libs', download.get(0).toString())
        if(!fileLocation.exists())  {
            def downloadString = download.get(1).toString()
            if(downloadString.contains(" ")) {
                downloadString = downloadString.replace(" ", "%20");
            }
            println "Downloading " + download.get(0).toString()
            fileLocation.withOutputStream { out ->
                new URL(downloadString).withInputStream { from ->
                    out << from;
                }
            }
        }
    }


}

runClient {
    if(project.hasProperty('mcUsername') && project.hasProperty('mcPassword') ) {
        args += "--username=${project.mcUsername}"
        args += "--password=${project.mcPassword}"
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main { output.resourcesDir = output.classesDir }
}

task("uploadJars", dependsOn: "reobf") {
    description = "uploads JARs"
    println System.getenv("local_maven")
    if (System.getenv("local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("local_maven"))
                    pom {
                        groupId = project.group
                        version = project.version
                        artifactId = project.archivesBaseName
                        project {
                            name project.archivesBaseName
                            packaging 'jar'
                            description 'MoarCarts'
                            url 'http://BrassGoggledCoders.xyz'
                            scm {
                                url 'https://github.com/BrassGoggledCoders/MoarCarts.git'
                                connection 'scm:git:git@github.com:BrassGoggledCoders/MoarCarts.git'
                                developerConnection 'scm:git:git@github.com:BrassGoggledCoders/MoarCarts.git'
                            }
                            issueManagement {
                                system 'github'
                                url 'https://github.com/BrassGoggledCoders/MoarCarts/issues'
                            }
                            licenses {
                                license {
                                    name 'MIT'
                                    url 'https://github.com/BrassGoggledCoders/MoarCarts/blob/master/LICENSE'
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'SkySom'
                                    name 'SkySom'
                                    roles { role 'developer' }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
