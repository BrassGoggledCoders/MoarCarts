buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'forge'

file "gradle.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

project.ext {
    buildNum = System.getenv("BUILD_NUMBER")
    mcVersion = "${config.minecraft.version}"
}

version = "${config.minecraft.version}-${config.moarcarts.version}-project.ext.buildNum"
group = "brassgoggledcoders"
archivesBaseName = "moarcarts"

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}-${config.minecraft.version}"

    replace "@VERSION@", project.version
    replaceIn "MoarCarts.java"
}

repositories {
    maven {
        name "K4Repo"
        url "http://maven.k-4u.nl"
    }
    maven {
        name "Chickenbones"
        url "http://chickenbones.net/maven/"
    }
    maven {
        name "Waila"
        url "http://mobiusstrip.eu/maven"
    }
}

dependencies {
    compile "brassgoggledcoders:boilerplate:${config.minecraft.version}-${config.boilerplate.version}:deobf"
    compile "codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft.version}-${config.codechickencore.version}:dev"
    compile "codechicken:CodeChickenLib:${config.minecraft.version}-${config.codechickenlib.version}:dev"
}

task getLibraries {
    def libsFolder = new File('libs')
    if (!libsFolder.isDirectory()) {
        libsFolder.mkdirs()
    }

    def railcraft = 'Railcraft_' + config.minecraft.version + '-' + config.railcraft.version + '-dev.jar'
    def railcraftSource = 'https://dl.dropboxusercontent.com/u/38558957/Minecraft/Railcraft/' + railcraft
    def railcraftDest = new File('libs', railcraft)

    if(!railcraftDest.exists()){
        railcraftDest.withOutputStream { out ->
            new URL(railcraftSource).withInputStream { from ->  out << from; }
        }
    }
}


processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}
